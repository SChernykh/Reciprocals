#include <stdint.h>
#include <intrin.h>

static const uint32_t R[256] = {
	0xfe03f80du,0xbffc0be0u,0x307a1b8au,0xa0f82d1cu,0xfa232cf0u,0xbff468b9u,0x306ed36au,0xa0e95d04u,
	0xf6603d96u,0xbfed1d1bu,0x30643669u,0xa0dba3abu,0xf2b9d646u,0xbfe623e0u,0x305a380bu,0xa0cee8d8u,
	0xef2eb71eu,0xbfdf7842u,0x3050cce7u,0xa0c316bau,0xebbdb2a4u,0xbfd915d3u,0x3047ea8bu,0xa0b819a9u,
	0xe865ac7au,0xbfd2f871u,0x303f8768u,0xa0addfe6u,0xe5259829u,0xbfcd1c48u,0x30379ab8u,0xa0a45964u,
	0xe1fc780bu,0xbfc77dc4u,0x30301c6cu,0xa09b779bu,0xdee95c4bu,0xbfc21991u,0x3029051bu,0xa0932d60u,
	0xdbeb61edu,0xbfbcec92u,0x30224df5u,0xa08b6ebau,0xd901b202u,0xbfb7f3e0u,0x301bf0b1u,0xa08430ccu,
	0xd62b80d5u,0xbfb32cc3u,0x3015e781u,0xa07ad35eu,0xd3680d35u,0xbfae94b0u,0x30102d0cu,0xa06e20bau,
	0xd0b69fc9u,0xbfaa2946u,0x300abc5du,0xa0623935u,0xce168a76u,0xbfa5e849u,0x300590e1u,0xa0570dc5u,
	0xcb8727bfu,0xbfa1cfa0u,0x3000a657u,0xa04c90a8u,0xc907da4du,0xbf9ddd55u,0x2ff7f1a2u,0xa042b544u,
	0xc6980c68u,0xbf9a0f8eu,0x2fef0950u,0xa039700cu,0xc4372f84u,0xbf96648du,0x2fe68cecu,0xa030b668u,
	0xc1e4bbd5u,0xbf92dab0u,0x2fde7628u,0xa0287e9au,0xbfa02fe7u,0xbf8f706cu,0x2fd6bf24u,0xa020bfb0u,
	0xbd691046u,0xbf8c244du,0x2fcf6268u,0xa019716bu,0xbb3ee721u,0xbf88f4f5u,0x2fc85ad9u,0xa0128c34u,
	0xb92143f9u,0xbf85e119u,0x2fc1a3b6u,0xa00c090au,0xb70fbb59u,0xbf82e77fu,0x2fbb388du,0xa005e177u,
	0xb509e68au,0xbf800700u,0x2fb51538u,0xa0000f81u,0xb30f6352u,0xbf7a7d0cu,0x2faf35d5u,0x9ff51b47u,
	0xb11fd3b7u,0xbf751a0du,0x2fa996c1u,0x9feaad82u,0xaf3addc6u,0xbf6fe311u,0x2fa43496u,0x9fe0cc3cu,
	0xad602b57u,0xbf6ad63du,0x2f9f0c23u,0x9fd76eacu,0xab8f69e2u,0xbf65f1d0u,0x2f9a1a6cu,0x9fce8caeu,
	0xa9c84a47u,0xbf61341eu,0x2f955ca0u,0x9fc61eb1u,0xa80a80a7u,0xbf5c9b93u,0x2f90d01fu,0x9fbe1daeu,
	0xa655c438u,0xbf5826aeu,0x2f8c726du,0x9fb6831au,0xa4a9cf1du,0xbf53d404u,0x2f884136u,0x9faf48e1u,
	0xa3065e3fu,0xbf4fa238u,0x2f843a4bu,0x9fa86958u,0xa16b312eu,0xbf4b9001u,0x2f805b99u,0x9fa1df36u,
	0x9fd809fdu,0xbf479c25u,0x2f794662u,0x9f9ba58eu,0x9e4cad23u,0xbf43c579u,0x2f721e7au,0x9f95b7c7u,
	0x9cc8e160u,0xbf400ae1u,0x2f6b3c06u,0x9f901196u,0x9b4c6f9eu,0xbf3c6b4cu,0x2f649bc3u,0x9f8aaef7u,
	0x99d722dau,0xbf38e5b9u,0x2f5e3a9cu,0x9f858c29u,0x9868c809u,0xbf357931u,0x2f5815aau,0x9f80a5aau,
	0x97012e02u,0xbf3224c9u,0x2f522a2du,0x9f77f05eu,0x95a02567u,0xbf2ee79fu,0x2f4c758cu,0x9f6f0147u,
	0x94458094u,0xbf2bc0dfu,0x2f46f54fu,0x9f667847u,0x92f11383u,0xbf28afbbu,0x2f41a725u,0x9f5e4ff2u,
	0x91a2b3c4u,0xbf25b36eu,0x2f3c88d7u,0x9f568334u,0x905a3863u,0xbf22cb3eu,0x2f37984eu,0x9f4f0d44u,
	0x8f1779d9u,0xbf1ff679u,0x2f32d391u,0x9f47e9a5u,0x8dda5202u,0xbf1d3471u,0x2f2e38bdu,0x9f41141eu,
	0x8ca29c04u,0xbf1a8484u,0x2f29c609u,0x9f3a88b8u,0x8b703449u,0xbf17e614u,0x2f2579c5u,0x9f3443b5u,
	0x8a42f870u,0xbf15588bu,0x2f215255u,0x9f2e4191u,0x891ac73au,0xbf12db58u,0x2f1d4e32u,0x9f287efbu,
	0x87f78087u,0xbf106df2u,0x2f196be7u,0x9f22f8d2u,0x86d90544u,0xbf0e0fd3u,0x2f15aa14u,0x9f1dac25u,
	0x85bf3761u,0xbf0bc07du,0x2f120767u,0x9f18962au,0x84a9f9c7u,0xbf097f75u,0x2f0e82a0u,0x9f13b443u,
	0x83993052u,0xbf074c46u,0x2f0b1a8fu,0x9f0f03f4u,0x828cbfbeu,0xbf052680u,0x2f07ce11u,0x9f0a82e6u,
	0x81848da8u,0xbf030db7u,0x2f049c11u,0x9f062ee2u,0x80808080u,0xbf010182u,0x2f018388u,0x9f0205cfu,
};

struct SReciprocal
{
	uint32_t C0;
	float C[3];

	int64_t value(float x) const
	{
		float delta = C[2];
		delta = delta * x + C[1];
		delta = delta * x + C[0];
		delta *= x;
		return C0 + _mm_cvtss_si32(_mm_set_ss(delta));
	}
};

#define RCP ((SReciprocal*)R)

uint64_t get_reciprocal(uint64_t a)
{
	unsigned long shift;
	_BitScanReverse(&shift, static_cast<uint32_t>(a));
	shift = 31 - shift;
	const uint64_t a1 = a << shift;

	const uint32_t index0 = static_cast<uint32_t>(a1 << 1) >> 26;
	const float index1 = static_cast<float>(static_cast<int32_t>(a1 & 33554431) - 16777216);
	const int64_t r = (RCP[index0].value(index1) + 1) >> 1;

	int64_t h = -int64_t(r * a);
	const int h_shift = (shift < 2) ? (2 - shift) : 0;
	h >>= h_shift;

	const int32_t r1 = static_cast<int32_t>((r * static_cast<int32_t>(h)) >> (64 - ((shift + 2) * 2 + h_shift)));
	return (r << (shift + 2)) + r1 + 1;
}

void fast_div(uint64_t a, uint32_t b, uint64_t &q, uint64_t &r)
{
	_umul128(a, get_reciprocal(b), &q);
	int64_t tmp = a - q * b;
	if (tmp < 0)
	{
		--q;
		tmp += b;
	}
	else if (tmp >= b)
	{
		++q;
		tmp -= b;
	}
	r = static_cast<uint64_t>(tmp);
}
