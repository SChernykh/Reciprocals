#include <stdint.h>
#include <intrin.h>

// Set it to 1 to correctly process divisors < 2^31
#define SMALL_DIVISORS_ENABLED 0

static const uint32_t R[384] = {
	0xc03fc048u,0xfe02fc1fu,0xfc1fd05fu,0x4239540eu,0xfa1a959fu,0xf45f734fu,0xc621594au,0xf64917feu,
	0xecff1914u,0x4bec884eu,0xf28dd17eu,0xe5dec192u,0xd38ff093u,0xeee8171du,0xdefe6cafu,0x5d00f57bu,
	0xeb5743fdu,0xd86e1a53u,0xe8354b36u,0xe7dab9dcu,0xd20dca65u,0x7522f3bfu,0xe471dfdcu,0xcbed7cceu,
	0x3c03c0cu,0xe11c22bcu,0xc5fd3179u,0x9403b949u,0xddd8f4dbu,0xc04ce851u,0x25e44646u,0xdaa7cd5bu,
	0xbacca142u,0xb95900f3u,0xd788287au,0xb57c5c39u,0x4e594800u,0xd479871au,0xb06c1924u,0xe4dcb891u,
	0xd17b6e59u,0xab7bd7f1u,0x7cdb2c0bu,0xce8d67f9u,0xa6ab988eu,0x164cb600u,0xcbaf01b9u,0xa21b5aedu,
	0xb129a223u,0xc8dfcd38u,0x9dab1efeu,0x4d6a7265u,0xc61f5fd8u,0x995ae4b2u,0xeb07dd15u,0xc36d5297u,
	0x953aabfau,0x89facb19u,0xc0c94237u,0x913a74c9u,0x2a3c5639u,0xbe32ce57u,0x8d5a3f13u,0xcbc5c786u,
	0xbba99a56u,0x899a0acau,0x6e9095b9u,0xb92d4c16u,0x85f9d7e2u,0x129663bbu,0xb6bd8cd6u,0x8279a650u,
	0xb7d0ff32u,0xb45a0875u,0x7f197609u,0x5e3a5f17u,0xb2026db5u,0x7bc94702u,0x5cca26au,0xafb66dd5u,
	0x78a91930u,0xae820ed8u,0xad75bcd4u,0x7598ec8au,0x58550f92u,0xab401094u,0x7298c107u,0x340340cu,
	0xa9152214u,0x6fb8969cu,0xaf3e2edfu,0xa6f4abd3u,0x6ce86d42u,0x5c49d4b3u,0xa4de6b13u,0x6a3844f0u,
	0xa5e1b27u,0xa2d21eb3u,0x67981d9du,0xb97617d0u,0xa0cf87f2u,0x6507f742u,0x698cff3eu,0x9ed66992u,
	0x6297d1d8u,0x1a9e240cu,0x9ce688b2u,0x6037ad56u,0xcca4f5eau,0x9affabf1u,0x5de789b6u,0x7f9d00ceu,
	0x99219b91u,0x5ba766f1u,0x3381ec0bu,0x974c21b1u,0x59774501u,0xe84f798au,0x957f09f0u,0x575723dfu,
	0x9e0184f9u,0x93ba2190u,0x55470385u,0x5494030fu,0x91fd3730u,0x5346e3edu,0xc0300c8u,0x90481b10u,
	0x5156c513u,0xc44aa2beu,0x8e9a9eafu,0x4f76a6efu,0x7d672464u,0x8cf494efu,0x4da6897du,0x3754d774u,
	0x8b55d1cfu,0x4bd66cb8u,0xf210233du,0x89be2b0eu,0x4a26509bu,0xad95840cu,0x882d76eeu,0x48763520u,
	0x69e18a8du,0x86a38d8eu,0x46d61a45u,0x26f0db41u,0x852047ceu,0x45460003u,0xe4c02deeu,0x83a37f8du,
	0x43b5e657u,0xa34c4d0du,0x822d0fedu,0x4235cd3du,0x6292154fu,0x80bcd50du,0x40c5b4b1u,0x228e751bu,
	0x7f52ac0du,0x3f559caeu,0xe33e6c0cu,0x7dee72ccu,0x3df58531u,0xa49f0a80u,0x7c90088cu,0x3ca56e37u,
	0x66ad711fu,0x7b374cecu,0x3b5557bbu,0x2966d06du,0x79e420acu,0x3a1541bbu,0xecc8685bu,0x7896656bu,
	0x38d52c33u,0xb0cf87e3u,0x774dfd6bu,0x37a51720u,0x75798c99u,0x760acbebu,0x3675027fu,0x3ac3e24fu,
	0x74ccb4cbu,0x3554ee4du,0xac02bau,0x73939cabu,0x3434da86u,0xc72f7501u,0x725f68eau,0x3324c729u,
	0x8e4bcd7fu,0x712fff8au,0x3214b433u,0x55fead5au,0x7005474au,0x3104a1a0u,0x1e45c22eu,0x6edf278au,
	0x30048f6eu,0xe71ec5c4u,0x6dbd8849u,0x2f147d9cu,0xb0877dc1u,0x6ca05209u,0x2e146c25u,0x7a7dbb58u,
	0x6b876e29u,0x2d345b09u,0x44ff5af6u,0x6a72c649u,0x2c444a45u,0x100a440cu,0x696244c9u,0x2b6439d6u,
	0xdb9c68bdu,0x6855d468u,0x2a8429bbu,0xa7b3c599u,0x674d60a8u,0x29b419f1u,0x744e6163u,0x6648d568u,
	0x28e40a76u,0x416a4cc6u,0x65481f08u,0x2813fb4au,0xf05a229u,0x644b2a48u,0x2753ec68u,0xdd1e8556u,
	0x6351e4a7u,0x2693ddd1u,0xabb32360u,0x625c3be7u,0x25d3cf81u,0x7ac1b251u,0x616a1e27u,0x2513c178u,
	0x4a487100u,0x607b7a07u,0x2463b3b4u,0x1a45a6d5u,0x5f903ec7u,0x23b3a632u,0xeab7a39cu,0x5ea85b86u,
	0x230398f2u,0xbb9cbf4au,0x5dc3c086u,0x22538bf1u,0x8cf359cdu,0x5ce25da6u,0x21b37f2fu,0x5eb9dae0u,
	0x5c0423a6u,0x211372aau,0x30eeb1deu,0x5b290386u,0x20736661u,0x3905594u,0x5a50ee66u,0x1fe35a51u,
	0xd69d4406u,0x597bd605u,0x1f434e7bu,0xaa140266u,0x58a9ac85u,0x1eb342dbu,0x7df31cc1u,0x57da63e5u,
	0x1e233772u,0x523925f3u,0x570deee5u,0x1da32c3eu,0x26e4b77cu,0x56444065u,0x1d13213eu,0xfbf4714cu,
	0x557d4ba4u,0x1c931671u,0xd166f9b7u,0x54b90404u,0x1c130bd4u,0xa73afd2cu,0x53f75d64u,0x1b930169u,
	0x7d6f2e3au,0x53384ba4u,0x1b12f72cu,0x5402454au,0x527bc344u,0x1a92ed1eu,0x2af3009cu,0x51c1b8c4u,
	0x1a22e33du,0x240240du,0x510a2104u,0x19a2d989u,0xd9e8790bu,0x5054f0e3u,0x1932cfffu,0xb1eace65u,
	0x4fa21da3u,0x18c2c6a1u,0x8a45f844u,0x4ef19d23u,0x1862bd6bu,0x62f8cff2u,0x4e4364c3u,0x17f2b45eu,
	0x3c0233cbu,0x4d976ac3u,0x1782ab79u,0x1561072au,0x4ceda523u,0x1722a2bbu,0xef143244u,0x4c460a42u,
	0x16c29a22u,0xc91aa204u,0x4ba090e2u,0x165291afu,0xa3734808u,0x4afd2fc2u,0x15f28960u,0x7e1d1a74u,
	0x4a5bddc2u,0x15a28135u,0x591713e8u,0x49bc9222u,0x1542792du,0x3460335au,0x491f4442u,0x14e27147u,
	0xff77c0du,0x4883ebc2u,0x14926983u,0xebdbf571u,0x47ea8021u,0x143261dfu,0xc80cab10u,0x4752f981u,
	0x13e25a5cu,0xa488ac76u,0x46bd4fc1u,0x139252f8u,0x814f0d24u,0x46297b21u,0x13424bb2u,0x5e5ee46bu,
	0x45977401u,0x12f2448bu,0x3bb74d6bu,0x45073301u,0x12a23d82u,0x195766f7u,0x4478b0a1u,0x12523695u,
	0xf73e537fu,0x43ebe5e0u,0x12022fc5u,0xd56b38ffu,0x4360cba0u,0x11c22911u,0xb3dd40f2u,0x42d75b00u,
	0x11722278u,0x92939839u,0x424f8d20u,0x11321bfau,0x718d6f11u,0x41c95ba0u,0x10e21596u,0x50c9f8fbu,
	0x4144bfe0u,0x10a20f4cu,0x30486cb0u,0x40c1b360u,0x1062091bu,0x1008040fu,0x40403020u,0x10220303u,
};

#pragma pack(push, 1)
struct SReciprocal
{
	uint64_t C0 : 37;
	uint64_t C1 : 27;
	uint32_t C2 : 20;
	uint32_t C3 : 12;
};
#pragma pack(pop)

#define RCP ((SReciprocal*)R)

uint64_t get_reciprocal(uint32_t a)
{
#if SMALL_DIVISORS_ENABLED
	unsigned long shift;
	_BitScanReverse(&shift, a);
	shift = 31 - shift;
	const uint32_t a1 = a << shift;

	const uint32_t index1 = (a1 << 1) >> 25;
	const int32_t index2 = (a1 & 16777215) - 8388608;
#else
	const uint32_t index1 = (a << 1) >> 25;
	const int32_t index2 = (a & 16777215) - 8388608;
#endif

	const int64_t r0 = int64_t(RCP[index1].C0 | (1LL << 37)) << 22;
	const int64_t r1 = int64_t(RCP[index1].C1) << 12;
	const int64_t r2 = (int64_t(RCP[index1].C2) << 19) + (RCP[index1].C2 << 3);
	const int32_t r3 = RCP[index1].C3;

	int64_t rr;
	rr = static_cast<int32_t>(-r3 * (index2 >> 4));
	rr = ((rr + r2) * index2) >> 31;
	rr = ((rr - r1) * index2) >> 10;
	uint64_t r = static_cast<uint64_t>((rr + r0) >> 27);

#if SMALL_DIVISORS_ENABLED
	r <<= shift;
	if (a <= 2147462767)
	{
		uint64_t lo, hi, hi2;
		lo = _umul128(r, a, &hi);
		_subborrow_u64(_subborrow_u64(0, a >> 1, lo, &lo), 2, hi, &hi);
		_umul128(r, lo, &hi2);
		r = hi2 + (hi ? r : 0);
	}
#endif

	return r;
}

void fast_div(uint64_t a, uint32_t b, uint64_t &q, uint64_t &r)
{
	_umul128(a, get_reciprocal(b), &q);
	int64_t tmp = a - q * b;
	if (tmp < 0)
	{
		--q;
		tmp += b;
	}
	else if (tmp >= b)
	{
		++q;
		tmp -= b;
	}
	r = static_cast<uint64_t>(tmp);
}
