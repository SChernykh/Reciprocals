#include <stdint.h>
#include <intrin.h>

// Set it to 1 to correctly process divisors < 2^31
#define SMALL_DIVISORS_ENABLED 0

static const uint32_t R[768] = {
	0xe00ff816u,0xff00bf9fu,0xfe0fe818u,0xa08f2954u,0xfd06b2bfu,0xfa1fb8d6u,0x618c21beu,0xfb12825fu,
	0xf64f8a4eu,0x23056d14u,0xf924177fu,0xf27f5c7eu,0xe4f99cd0u,0xf73b5b7eu,0xeecf2f61u,0xa7674807u,
	0xf55837feu,0xeb2f02f3u,0x6a4d0b49u,0xf37a977eu,0xe79ed733u,0x2da98893u,0xf1a2645eu,0xe41eac1bu,
	0xf17b6726u,0xefcf899du,0xe0ae81aau,0xb5c1537au,0xee01f2ddu,0xdd4e57dcu,0x7a79ff1cu,0xec398bddu,
	0xda0e2eafu,0x3fa4209cu,0xea7640bdu,0xd6ce061eu,0x53e7370u,0xe8b7fdfdu,0xd39dde27u,0xcb47b7e0u,
	0xe6feb09cu,0xd07db6c8u,0x91beb2f0u,0xe54a45fcu,0xcd6d8ffdu,0x58a22e46u,0xe39aab7cu,0xca6d69c3u,
	0x1ff0f816u,0xe1efcf1cu,0xc76d4419u,0xe7a9e30du,0xe0499f3bu,0xc48d1efcu,0xafcbc63fu,0xdea80a7bu,
	0xc1acfa68u,0x78557d0cu,0xdd0aff9bu,0xbeecd65cu,0x4145e712u,0xdb726dfbu,0xbc2cb2d5u,0xa9be816u,
	0xd9de44fbu,0xb97c8fd0u,0xd45667f1u,0xd84e747au,0xb6cc6d4cu,0x9e745281u,0xd6c2ecbau,0xb43c4b46u,
	0x68f49792u,0xd53b9ddau,0xb1ac29bbu,0x33d62acfu,0xd3b878bau,0xaf2c08abu,0xff1803b2u,0xd2396e39u,
	0xacabe811u,0xcab91d6au,0xd0be6f99u,0xaa3bc7edu,0x96b876d8u,0xcf476e39u,0xa7dba83cu,0x63151273u,
	0xcdd45bd9u,0xa58b88fdu,0x2fcdf63eu,0xcc652a59u,0xa33b6a2cu,0xfce22bb4u,0xcaf9cc38u,0xa0fb4bc9u,
	0xca50bfbcu,0xc9923398u,0x9ebb2dd2u,0x9818c29cu,0xc82e5338u,0x9c9b1044u,0x663947e4u,0xc6ce1e38u,
	0x9a6af31eu,0x34b16661u,0xc5718778u,0x984ad65eu,0x3803815u,0xc4188258u,0x963aba03u,0xd2a4da20u,
	0xc2c30297u,0x943a9e0au,0xa21e6cbau,0xc170fbf7u,0x923a8272u,0x71ec1320u,0xc0226237u,0x903a6739u,
	0x420cf38cu,0xbed729d7u,0x8e4a4c5eu,0x12803723u,0xbd8f46f7u,0x8c6a31dfu,0xe34509eeu,0xbc4aae56u,
	0x8a8a17bau,0xb45a9ac8u,0xbb095496u,0x88a9fdefu,0x85c01b55u,0xb9cb2ed6u,0x86d9e47bu,0x5774bff6u,
	0xb8903236u,0x8519cb5eu,0x2977bfc0u,0xb75853d6u,0x8359b295u,0xfbc8546au,0xb6238975u,0x81999a20u,
	0xce65ba4au,0xb4f1c875u,0x7fe981fcu,0xa14f3040u,0xb3c306f5u,0x7e496a29u,0x7483f7b7u,0xb2973ad5u,
	0x7c9952a6u,0x48035491u,0xb16e5a35u,0x7b093b71u,0x1bcc8d23u,0xb0485b95u,0x79692488u,0xefdeea26u,
	0xaf253534u,0x77d90debu,0xc439b6b0u,0xae04ddb4u,0x7658f798u,0x98dc402cu,0xace74c14u,0x74c8e18eu,
	0x6dc5d64au,0xabcc7734u,0x7358cbcdu,0x42f5cafdu,0xaab455f4u,0x71d8b652u,0x186b726fu,0xa99edfb4u,
	0x7068a11du,0xee2622f5u,0xa88c0bd3u,0x6f088c2cu,0xc425350cu,0xa77bd1d3u,0x6d98777fu,0x9a68034bu,
	0xa66e2933u,0x6c386315u,0x70edea5du,0xa56309d3u,0x6ae84eecu,0x47b648fbu,0xa45a6b93u,0x69883b03u,
	0x1ec07fdeu,0xa3544653u,0x6838275au,0xf60bf1bcu,0xa2509272u,0x66f813efu,0xcd98033eu,0xa14f47f2u,
	0x65a800c2u,0xa5641af9u,0xa0505f52u,0x6467edd1u,0x7d6fa166u,0x9f53d132u,0x6337db1cu,0x55ba00dau,
	0x9e5995f2u,0x61f7c8a2u,0x2e42a581u,0x9d61a652u,0x60c7b661u,0x708fd54u,0x9c6bfb52u,0x5f97a459u,
	0xe00c7814u,0x9b788dd1u,0x5e779289u,0xb94c8741u,0x9a8756d1u,0x5d4780f0u,0x92c89e15u,0x99984f71u,
	0x5c276f8eu,0x6c80317eu,0x98ab7111u,0x5b175e61u,0x4672b814u,0x97c0b4f1u,0x59f74d69u,0x209faa18u,
	0x96d81491u,0x58e73ca5u,0xfb068168u,0x95f18970u,0x57d72c14u,0xd5a6b97cu,0x950d0d50u,0x56d71bb6u,
	0xb07fcf60u,0x942a99f0u,0x55c70b89u,0x8b9141adu,0x934a2910u,0x54c6fb8du,0x66da9084u,0x926bb4b0u,
	0x53c6ebc1u,0x425b3d85u,0x918f36b0u,0x52c6dc25u,0x1e12cbd0u,0x90b4a950u,0x51d6ccb8u,0xfa00bff8u,
	0x8fdc06cfu,0x50d6bd79u,0xd624a004u,0x8f05494fu,0x4fe6ae67u,0xb27df365u,0x8e306b2fu,0x4f069f82u,
	0x8f0c42f2u,0x8d5d670fu,0x4e1690c9u,0x6bcf18e3u,0x8c8c372fu,0x4d36823cu,0x48c600ceu,0x8bbcd64fu,
	0x4c4673d9u,0x25f0879eu,0x8aef3f2fu,0x4b6665a1u,0x34e3b91u,0x8a236c4fu,0x4a965792u,0xe0deac32u,
	0x895958ceu,0x49b649adu,0xbea16a56u,0x8890ff6eu,0x48e63bf0u,0x9c960813u,0x87ca5b2eu,0x48062e5bu,
	0x7abc18c2u,0x8705670eu,0x473620edu,0x591330f3u,0x86421e4eu,0x467613a6u,0x379ae66eu,0x85807beeu,
	0x45a60685u,0x1652d02eu,0x84c07b6eu,0x44d5f98au,0xf53a8659u,0x840217cdu,0x4415ecb5u,0xd451a242u,
	0x83454cadu,0x4355e003u,0xb397be5fu,0x828a156du,0x4295d376u,0x930c7646u,0x81d06d8du,0x41d5c70du,
	0x72af66adu,0x811850adu,0x4125bac7u,0x52802d63u,0x8061ba6du,0x4065aea3u,0x327e694au,0x7faca66du,
	0x3fb5a2a2u,0x12a9ba58u,0x7ef9108du,0x3f0596c2u,0xf301c18fu,0x7e46f46cu,0x3e558b04u,0xd38620fcu,
	0x7d964e2cu,0x3da57f67u,0xb4367bb3u,0x7ce7198cu,0x3cf573e9u,0x951275cau,0x7c39526cu,0x3c45688cu,
	0x7619b458u,0x7b8cf52cu,0x3ba55d4eu,0x574bdd6cu,0x7ae1fd8cu,0x3b055230u,0x38a89813u,0x7a3867ecu,
	0x3a654730u,0x1a2f8c4cu,0x7990306cu,0x39c53c4eu,0xfbe06307u,0x78e9534bu,0x3925318au,0xddbac626u,
	0x7843ccabu,0x388526e3u,0xbfbe6073u,0x779f992bu,0x37e51c5au,0xa1eadda3u,0x76fcb50bu,0x375511edu,
	0x843fea4eu,0x765b1cabu,0x36c5079du,0x66bd33f1u,0x75baccabu,0x3624fd68u,0x496268e6u,0x751bc18bu,
	0x3594f34fu,0x2c2f3864u,0x747df7ebu,0x3504e951u,0xf23527bu,0x73e16c2bu,0x3474df6eu,0xf23e6813u,
	0x73461b4au,0x33f4d5a5u,0xd5802ae6u,0x72ac01cau,0x3364cbf7u,0xb8e84d80u,0x72131c8au,0x32d4c262u,
	0x9c76833au,0x717b684au,0x3254b8e7u,0x802a803bu,0x70e4e1cau,0x31d4af85u,0x6403f971u,0x704f860au,
	0x3144a63bu,0x4802a491u,0x6fbb520au,0x30c49d0au,0x2c263813u,0x6f28428au,0x304493f2u,0x106e6b32u,
	0x6e9654aau,0x2fc48af1u,0xf4daf5e8u,0x6e058549u,0x2f548207u,0xd96b90e7u,0x6d75d1c9u,0x2ed47935u,
	0xbe1ff5a1u,0x6ce73709u,0x2e54707au,0xa2f7de3cu,0x6c59b249u,0x2de467d6u,0x87f30594u,0x6bcd40a9u,
	0x2d645f48u,0x6d112739u,0x6b41df69u,0x2cf456d0u,0x5251ff6bu,0x6ab78bc9u,0x2c844e6eu,0x37b54b18u,
	0x6a2e4329u,0x2c144621u,0x1d3ac7dau,0x69a602a9u,0x2ba43deau,0x2e233f8u,0x691ec7c9u,0x2b3435c7u,
	0xe8ab4e5du,0x68989008u,0x2ac42dbau,0xce95d69eu,0x68135888u,0x2a5425c1u,0xb4a18cf1u,0x678f1f08u,
	0x29e41ddcu,0x9ace322fu,0x670be0c8u,0x2984160bu,0x811b87d1u,0x66899b88u,0x29140e4eu,0x67894fedu,
	0x66084c88u,0x28b406a4u,0x4e174d35u,0x6587f1a8u,0x2843ff0eu,0x34c542f8u,0x65088868u,0x27e3f78au,
	0x1b92f518u,0x648a0e48u,0x2783f01au,0x2802812u,0x640c8128u,0x2723e8bcu,0xe98ca0f6u,0x638fdea7u,
	0x26c3e170u,0xd0b82564u,0x63142487u,0x2663da36u,0xb8027b90u,0x62995067u,0x2603d30fu,0x9f6b6a3du,
	0x621f6007u,0x25a3cbf9u,0x86f2b8bbu,0x61a65187u,0x2543c4f4u,0x6e982ee3u,0x612e2267u,0x24e3be01u,
	0x565b951eu,0x60b6d0a7u,0x2493b71eu,0x3e3cb456u,0x60405a07u,0x2433b04du,0x263b5602u,0x5fcabca7u,
	0x23e3a98cu,0xe57441bu,0x5f55f647u,0x2383a2dcu,0xf690491eu,0x5ee20506u,0x23339c3cu,0xdee6300bu,
	0x5e6ee6a6u,0x22d395acu,0xc758c461u,0x5dfc9966u,0x22838f2cu,0xafe7d220u,0x5d8b1b26u,0x223388bbu,
	0x989325c1u,0x5d1a69e6u,0x21e3825au,0x815a8c3fu,0x5caa83e6u,0x21937c09u,0x6a3dd30cu,0x5c3b6726u,
	0x214375c6u,0x533cc813u,0x5bcd11c6u,0x20f36f92u,0x3c5739b7u,0x5b5f81e6u,0x20a3696eu,0x258cf6d3u,
	0x5af2b5c6u,0x20536358u,0xeddceb5u,0x5a86ab66u,0x20035d50u,0xf849911fu,0x5a1b6125u,0x1fb35756u,
	0xe1d00e45u,0x59b0d545u,0x1f73516bu,0xcb7116ccu,0x594705e5u,0x1f234b8eu,0xb52c7bcbu,0x58ddf145u,
	0x1ee345beu,0x9f020ec2u,0x587595c5u,0x1e933ffcu,0x88f1a1a3u,0x580df1a5u,0x1e533a48u,0x72fb06cbu,
	0x57a70345u,0x1e0334a0u,0x5d1e10ffu,0x5740c905u,0x1dc32f06u,0x475a936fu,0x56db4125u,0x1d832979u,
	0x31b061b3u,0x56766a25u,0x1d3323f9u,0x1c1f4fcau,0x56124245u,0x1cf31e86u,0x6a7321bu,0x55aec805u,
	0x1cb3191fu,0xf147dd6eu,0x554bf9e4u,0x1c7313c5u,0xdc0126f0u,0x54e9d644u,0x1c330e77u,0xc6d2e432u,
	0x54885bc4u,0x1bf30935u,0xb1bceb23u,0x54278884u,0x1bb303ffu,0x9cbf1216u,0x53c75b64u,0x1b72fed5u,
	0x87d92fb9u,0x5367d2c4u,0x1b32f9b7u,0x730b1b1eu,0x5308ed24u,0x1af2f4a4u,0x5e54abaeu,0x52aaa924u,
	0x1ab2ef9du,0x49b5b930u,0x524d0564u,0x1a72eaa2u,0x352e1bc9u,0x51f00044u,0x1a42e5b1u,0x20bdabf4u,
	0x51939884u,0x1a02e0ccu,0xc644287u,0x5137ccc4u,0x19c2dbf2u,0xf821b8b0u,0x50dc9ba3u,0x1992d722u,
	0xe3f5e7f3u,0x508203c3u,0x1952d25eu,0xcfe0aa2bu,0x502803c3u,0x1922cda4u,0xbbe1d98au,0x4fce9a63u,
	0x18e2c8f4u,0xa7f95092u,0x4f75c643u,0x18b2c44fu,0x9426ea1au,0x4f1d8623u,0x1872bfb5u,0x806a8150u,
	0x4ec5d8a3u,0x1842bb24u,0x6cc3f1acu,0x4e6ebca3u,0x1802b69eu,0x593316fcu,0x4e1830c3u,0x17d2b221u,
	0x45b7cd5cu,0x4dc233e3u,0x17a2adafu,0x3251f137u,0x4d6cc4c3u,0x1772a946u,0x1f015f46u,0x4d17e223u,
	0x1732a4e7u,0xbc5f490u,0x4cc38ac3u,0x1702a091u,0xf89f8e68u,0x4c6fbd82u,0x16d29c45u,0xe58e0a6cu,
	0x4c1c7922u,0x16a29802u,0xd2914687u,0x4bc9bca2u,0x167293c8u,0xbfa920e9u,0x4b7786a2u,0x16428f98u,
	0xacd57812u,0x4b25d642u,0x16128b71u,0x9a162ac6u,0x4ad4aa22u,0x15e28752u,0x876b1812u,0x4a840142u,
	0x15b2833du,0x74d41f4au,0x4a33daa2u,0x15827f30u,0x62512008u,0x49e434e2u,0x15527b2cu,0x4fe1fa2bu,
	0x49950f42u,0x15227730u,0x3d868dd6u,0x49466882u,0x1502733eu,0x2b3ebb75u,0x48f83f82u,0x14d26f53u,
	0x190a63b1u,0x48aa9362u,0x14a26b71u,0x6e96779u,0x485d6302u,0x14726797u,0xf4dba7fdu,0x4810ad41u,
	0x145263c5u,0xe2e106afu,0x47c47161u,0x14225ffbu,0xd0f9653fu,0x4778ae21u,0x13f25c3au,0xbf24a5a2u,
	0x472d62a1u,0x13d25880u,0xad62aa07u,0x46e28de1u,0x13a254ceu,0x9bb354dfu,0x46982ee1u,0x13725123u,
	0x8a1688d7u,0x464e44c1u,0x13524d81u,0x788c28dbu,0x4604ce61u,0x132249e6u,0x67141813u,0x45bbcb01u,
	0x13024652u,0x55ae39e1u,0x45733981u,0x12d242c6u,0x445a71e6u,0x452b1921u,0x12b23f42u,0x3318a3fdu,
	0x44e368e1u,0x12923bc4u,0x21e8b438u,0x449c27c1u,0x1262384eu,0x10ca86e8u,0x44555501u,0x124234dfu,
	0xffbe0094u,0x440eefc0u,0x12123177u,0xeec305fbu,0x43c8f700u,0x11f22e16u,0xddd97c15u,0x43836a00u,
	0x11d22abcu,0xcd014812u,0x433e47e0u,0x11b22769u,0xbc3a4f58u,0x42f98fa0u,0x1182241cu,0xab847783u,
	0x42b54080u,0x116220d6u,0x9adfa667u,0x427159c0u,0x11421d97u,0x8a4bc208u,0x422dda60u,0x11221a5fu,
	0x79c8b0a6u,0x41eac1c0u,0x1102172du,0x695658b1u,0x41a80ee0u,0x10d21401u,0x58f4a0cbu,0x4165c120u,
	0x10b210dcu,0x48a36fcbu,0x4123d780u,0x10920dbeu,0x3862acbeu,0x40e25160u,0x10720aa5u,0x28323edfu,
	0x40a12e00u,0x10520793u,0x18120d9au,0x40606c60u,0x10320487u,0x8020090u,0x40200c00u,0x10120181u,
};

#pragma pack(push, 1)
struct SReciprocal
{
	uint64_t C0 : 37;
	uint64_t C1 : 27;
	uint32_t C2 : 20;
	uint32_t C3 : 12;
};
#pragma pack(pop)

#define RCP ((SReciprocal*)R)

uint64_t get_reciprocal(uint32_t a)
{
#if SMALL_DIVISORS_ENABLED
	unsigned long shift;
	_BitScanReverse(&shift, a);
	shift = 31 - shift;
	const uint32_t a1 = a << shift;

	const uint32_t index1 = (a1 << 1) >> 24;
	const int32_t index2 = (a1 & 8388607) - 4194304;
#else
	const uint32_t index1 = (a << 1) >> 24;
	const int32_t index2 = (a & 8388607) - 4194304;
#endif

	const int64_t r0 = int64_t(RCP[index1].C0 | (1LL << 37)) << 23;
	const int64_t r1 = int64_t(RCP[index1].C1) << 13;
	const int64_t r2 = int64_t(RCP[index1].C2) << 20;
	const int32_t r3 = RCP[index1].C3;

	int64_t rr;
	rr = static_cast<int32_t>(-r3 * (index2 >> 3));
	rr = ((rr + r2) * index2) >> 31;
	rr = ((rr - r1) * index2) >> 10;
	uint64_t r = static_cast<uint64_t>((rr + r0) >> 28);

#if SMALL_DIVISORS_ENABLED
	r <<= shift;
	if (a <= 2147460838)
	{
		uint64_t lo, hi, hi2;
		lo = _umul128(r, a, &hi);
		_subborrow_u64(_subborrow_u64(0, a >> 1, lo, &lo), 2, hi, &hi);
		_umul128(r, lo, &hi2);
		r = hi2 + (hi ? r : 0);
	}
#endif

	return r;
}

void fast_div(uint64_t a, uint32_t b, uint64_t &q, uint64_t &r)
{
	_umul128(a, get_reciprocal(b), &q);
	int64_t tmp = a - q * b;
	if (tmp < 0)
	{
		--q;
		tmp += b;
	}
	else if (tmp >= b)
	{
		++q;
		tmp -= b;
	}
	r = static_cast<uint64_t>(tmp);
}
